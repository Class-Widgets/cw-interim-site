name: update-version.yml
on:
  workflow_dispatch:
  repository_dispatch:
    types: [update-version]

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Fetch latest release and alpha version of ClassWidgets 2
        id: fetch_versions
        run: |
          REPO_OWNER="rinlit-233-shiroko"
          REPO_NAME="class-widgets-2"
          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases"

          # 获取正式版（release）
          VERSION_RELEASE=$(curl -s "$API_URL" | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          URL_RELEASE=$(curl -s "$API_URL" | jq -r '[.[] | select(.prerelease == false)][0].assets[0].browser_download_url')

          # 获取测试版（alpha）
          VERSION_ALPHA=$(curl -s "$API_URL" | jq -r '[.[] | select(.prerelease == true)][0].tag_name')
          URL_ALPHA=$(curl -s "$API_URL" | jq -r '[.[] | select(.prerelease == true)][0].assets[0].browser_download_url')

          # 如果 release 没有就用 alpha
          if [ -z "$VERSION_RELEASE" ] || [ "$VERSION_RELEASE" = "null" ]; then
            VERSION_RELEASE="$VERSION_ALPHA"
            URL_RELEASE="$URL_ALPHA"
          fi

          echo "VERSION_RELEASE=$VERSION_RELEASE" >> $GITHUB_ENV
          echo "URL_RELEASE=$URL_RELEASE" >> $GITHUB_ENV
          echo "VERSION_ALPHA=$VERSION_ALPHA" >> $GITHUB_ENV
          echo "URL_ALPHA=$URL_ALPHA" >> $GITHUB_ENV

      - name: Create version.json
        run: |
          echo "{" > version.json
          echo '  "release": {' >> version.json
          echo '    "version": "'$VERSION_RELEASE'",' >> version.json
          echo '    "url": {' >> version.json
          echo '      "windows": "'$URL_RELEASE'"' >> version.json
          echo '    }' >> version.json
          echo '  },' >> version.json
          echo '  "alpha": {' >> version.json
          echo '    "version": "'$VERSION_ALPHA'",' >> version.json
          echo '    "url": {' >> version.json
          echo '      "windows": "'$URL_ALPHA'"' >> version.json
          echo '    }' >> version.json
          echo '  }' >> version.json
          echo "}" >> version.json

          cat version.json

      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.json
          git commit -m "Update version.json → Release: $VERSION_RELEASE | Alpha: $VERSION_ALPHA" || echo "No changes to commit"
          git push
